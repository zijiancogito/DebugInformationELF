test.c:1:	#include <stdint.h>
test.c:2:	
test.c:3:	void encrypt (uint32_t* v, uint32_t* k) {
test.c:4:	    uint32_t v0=v[0], v1=v[1], sum=0, i;           /* set up */
test.c:5:	    uint32_t delta=0x9e3779b9;                     /* a key schedule constant */
test.c:6:	    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
test.c:7:	    for (i=0; i < 32; i++) {                       /* basic cycle start */
test.c:8:	        sum += delta;
test.c:9:	        v0 += ((v1<<4) + k0) ^ (v1 + sum) ^ ((v1>>5) + k1);
test.c:10:	        v1 += ((v0<<4) + k2) ^ (v0 + sum) ^ ((v0>>5) + k3);
test.c:11:	    }                                              /* end cycle */
test.c:12:	    v[0]=v0; v[1]=v1;
test.c:13:	}
test.c:14:	
test.c:15:	void decrypt (uint32_t* v, uint32_t* k) {
test.c:16:	    uint32_t v0=v[0], v1=v[1], sum=0xC6EF3720, i;  /* set up */
test.c:17:	    uint32_t delta=0x9e3779b9;                     /* a key schedule constant */
test.c:18:	    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
test.c:19:	    for (i=0; i<32; i++) {                         /* basic cycle start */
test.c:20:	        v1 -= ((v0<<4) + k2) ^ (v0 + sum) ^ ((v0>>5) + k3);
test.c:21:	        v0 -= ((v1<<4) + k0) ^ (v1 + sum) ^ ((v1>>5) + k1);
test.c:22:	        sum -= delta;
test.c:23:	    }                                              /* end cycle */
test.c:24:	    v[0]=v0; v[1]=v1;
test.c:25:	}
test.c:26:	
test.c:27:	int main(){
test.c:28:	        return;
test.c:29:	}
