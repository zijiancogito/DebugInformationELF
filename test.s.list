0x1016:	add rsp, 8
0x101a:	ret 
0x1000:	endbr64 
0x1004:	sub rsp, 8
0x1008:	mov rax, qword ptr [rip + 0x2fd9]
0x100f:	test rax, rax
0x1012:	je 0x1016
0x1014:	call rax
0x11f8:	endbr64 
0x11fc:	sub rsp, 8
0x1200:	add rsp, 8
0x1204:	ret 
0x1020:	push qword ptr [rip + 0x2fa2]
0x1026:	bnd jmp qword ptr [rip + 0x2fa3]
0x11f3:	endbr64 
0x11f7:	ret 
0x1120:	endbr64 
0x1124:	jmp 0x10a0
0x10ed:	push rbp
0x10ee:	cmp qword ptr [rip + 0x2f02], 0
0x10f6:	mov rbp, rsp
0x10f9:	je 0x1107
0x10a0:	lea rdi, [rip + 0x2f69]
0x10a7:	lea rsi, [rip + 0x2f62]
0x10ae:	sub rsi, rdi
0x10b1:	mov rax, rsi
0x10b4:	shr rsi, 0x3f
0x10b8:	sar rax, 3
0x10bc:	add rsi, rax
0x10bf:	sar rsi, 1
0x10c2:	je 0x10d8
0x1066:	nop word ptr cs:[rax + rax]
0x1129:	endbr64 
0x112d:	push rbx
0x112e:	mov r10, rdi
0x1131:	mov ecx, dword ptr [rdi]
0x1133:	mov edx, dword ptr [rdi + 4]
0x1136:	mov r11d, dword ptr [rsi]
0x1139:	mov r9d, dword ptr [rsi + 4]
0x113d:	mov r8d, dword ptr [rsi + 8]
0x1141:	mov edi, dword ptr [rsi + 0xc]
0x1144:	mov esi, 0
0x10fb:	mov rdi, qword ptr [rip + 0x2f06]
0x1102:	call 0x1030
0x10c4:	mov rax, qword ptr [rip + 0x2f25]
0x10cb:	test rax, rax
0x10ce:	je 0x10d8
0x1070:	lea rdi, [rip + 0x2f99]
0x1077:	lea rax, [rip + 0x2f92]
0x107e:	cmp rax, rdi
0x1081:	je 0x1098
0x1149:	sub esi, 0x61c88647
0x114f:	mov eax, edx
0x1151:	shl eax, 4
0x1154:	add eax, r11d
0x1157:	mov ebx, edx
0x1159:	shr ebx, 5
0x115c:	add ebx, r9d
0x115f:	xor eax, ebx
0x1161:	lea ebx, [rsi + rdx]
0x1164:	xor eax, ebx
0x1166:	add ecx, eax
0x1168:	mov eax, ecx
0x116a:	shl eax, 4
0x116d:	add eax, r8d
0x1170:	mov ebx, ecx
0x1172:	shr ebx, 5
0x1175:	add ebx, edi
0x1177:	xor eax, ebx
0x1179:	lea ebx, [rsi + rcx]
0x117c:	xor eax, ebx
0x117e:	add edx, eax
0x1180:	cmp esi, 0xc6ef3720
0x1186:	jne 0x1149
0x1107:	call 0x1070
0x10d0:	jmp rax
0x1083:	mov rax, qword ptr [rip + 0x2f56]
0x108a:	test rax, rax
0x108d:	je 0x1098
0x1188:	mov dword ptr [r10], ecx
0x118b:	mov dword ptr [r10 + 4], edx
0x118f:	pop rbx
0x1190:	ret 
0x110c:	mov byte ptr [rip + 0x2efd], 1
0x1113:	pop rbp
0x1114:	ret 
0x108f:	jmp rax
0x1191:	endbr64 
0x1195:	push rbx
0x1196:	mov r10, rdi
0x1199:	mov ecx, dword ptr [rdi]
0x119b:	mov edx, dword ptr [rdi + 4]
0x119e:	mov r11d, dword ptr [rsi]
0x11a1:	mov r9d, dword ptr [rsi + 4]
0x11a5:	mov r8d, dword ptr [rsi + 8]
0x11a9:	mov edi, dword ptr [rsi + 0xc]
0x11ac:	mov esi, 0xc6ef3720
0x10d8:	ret 
0x1040:	endbr64 
0x1044:	xor ebp, ebp
0x1046:	mov r9, rdx
0x1049:	pop rsi
0x104a:	mov rdx, rsp
0x104d:	and rsp, 0xfffffffffffffff0
0x1051:	push rax
0x1052:	push rsp
0x1053:	xor r8d, r8d
0x1056:	xor ecx, ecx
0x1058:	lea rdi, [rip + 0x194]
0x105f:	call qword ptr [rip + 0x2f73]
0x11b1:	mov eax, ecx
0x11b3:	shl eax, 4
0x11b6:	add eax, r8d
0x11b9:	mov ebx, ecx
0x11bb:	shr ebx, 5
0x11be:	add ebx, edi
0x11c0:	xor eax, ebx
0x11c2:	lea ebx, [rcx + rsi]
0x11c5:	xor eax, ebx
0x11c7:	sub edx, eax
0x11c9:	mov eax, edx
0x11cb:	shl eax, 4
0x11ce:	add eax, r11d
0x11d1:	mov ebx, edx
0x11d3:	shr ebx, 5
0x11d6:	add ebx, r9d
0x11d9:	xor eax, ebx
0x11db:	lea ebx, [rdx + rsi]
0x11de:	xor eax, ebx
0x11e0:	sub ecx, eax
0x11e2:	add esi, 0x61c88647
0x11e8:	jne 0x11b1
0x1118:	ret 
0x1098:	ret 
0x1065:	hlt 
0x10e0:	endbr64 
0x10e4:	cmp byte ptr [rip + 0x2f25], 0
0x10eb:	jne 0x1118
0x11ea:	mov dword ptr [r10], ecx
0x11ed:	mov dword ptr [r10 + 4], edx
0x11f1:	pop rbx
0x11f2:	ret 
0x1030:	endbr64 
0x1034:	bnd jmp qword ptr [rip + 0x2fbd]
